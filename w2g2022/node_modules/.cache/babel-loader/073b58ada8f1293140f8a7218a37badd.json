{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\w2g2022\\\\w2g2022\\\\src\\\\App.js\";\nimport React from \"react\";\nimport './App.css';\nimport './Navbar.css';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Home from './components/Startseite';\nimport About from './components/about';\nimport Help from './components/Help';\nimport Room from './components/Room';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n_c = Sleep;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: {\n        userName: \"\",\n        userID: -1\n      },\n      users: {},\n      theme: \"Darkmode\"\n    };\n    this.updateCurrentUserInfo = this.updateCurrentUserInfo.bind(this); // This updates the client side information of the currently logged in user\n\n    this.getUsers = this.getUsers.bind(this); // This gets all user related information from the server side\n\n    this.getUserInfo = this.getUserInfo.bind(this); // This gets the name and id of any specific user;\n    // information is taken from a client side copy\n\n    this.getCurrentUserInfo = this.getCurrentUserInfo.bind(this); // This gets the name and id of the currently logged in user;\n    // information is taken from a client side copy\n\n    this.handleErrors = this.handleErrors.bind(this); // This prints out errors to the console and shows an error message to the user;\n    // Used for network errors (specifically CORS errors) only currently.\n\n    this.replaceClasses = this.replaceClasses.bind(this); // This replaces the theme related classes\n    // of all affected elements with one specific theme class\n\n    this.loginUser = this.loginUser.bind(this); // This logs the user into an existing or newly created account\n    // depending on whether or not the account previously existed\n\n    this.displayInfo = this.displayInfo.bind(this); // This will display info of a given type for a certain time in a specific text box\n    // This is because the initial theme is Darkmode\n\n    document.body.style.backgroundColor = \"rgb(100, 100, 100)\";\n  }\n\n  async displayInfo(type, message, timeLength) {\n    let infoMessageContainer = document.getElementById(\"infoMessage\");\n    infoMessageContainer.classList.replace(\"hidden\", type);\n    infoMessageContainer.innerText = message;\n    await Sleep(timeLength);\n    infoMessageContainer.classList.replace(type, \"hidden\");\n    infoMessageContainer.innerText = \"\";\n  }\n  /* >>>>>     LATER FOR THEME PICKER     <<<<<<\r\n  \r\n  replaceClasses(newClass) {\r\n    this.setState({\r\n      theme: newClass,\r\n    });\r\n    if (\r\n      newClass !== \"Lightmode\" &&\r\n      document.getElementsByClassName(\"Lightmode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"Lightmode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"Lightmode\");\r\n        elements[0].classList.replace(\"Lightmode\", newClass);\r\n      }\r\n    } else if (\r\n      newClass !== \"Darkmode\" &&\r\n      document.getElementsByClassName(\"Darkmode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"Darkmode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"Darkmode\");\r\n        elements[0].classList.replace(\"Darkmode\", newClass);\r\n      }\r\n    } else if (\r\n      newClass !== \"VisionMode\" &&\r\n      document.getElementsByClassName(\"VisionMode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"VisionMode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"VisionMode\");\r\n        elements[0].classList.replace(\"VisionMode\", newClass);\r\n      }\r\n    } else if (\r\n      newClass !== \"ColorblindMode\" &&\r\n      document.getElementsByClassName(\"ColorblindMode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"ColorblindMode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"ColorblindMode\");\r\n        elements[0].classList.replace(\"ColorblindMode\", newClass);\r\n      }\r\n    }\r\n  }\r\n  \r\n  changeTheme() {\r\n    this.props.replaceClasses(this.props.name);\r\n    document.body.style.background = this.backgrounds[this.props.name];\r\n    let containers = document.getElementsByClassName(\"container\");\r\n      for (let i = 0; i < containers.length; i++) {\r\n      let images = containers[i].getElementsByTagName(\"img\");\r\n      images[0].src =\r\n        this.props.name === \"Darkmode\" || this.props.name === \"VisionMode\"\r\n          ? DarkmodeSettings\r\n          : LightmodeSettings;\r\n      if (images.length > 1) {\r\n        for (let n = 1; n < images.length; n++) {\r\n          if (images[n].alt === \"Save\") {\r\n            images[n].src =\r\n              this.props.name === \"ColorblindMode\"\r\n                ? \"\"\r\n                : this.props.name === \"Darkmode\" ||\r\n                  this.props.name === \"VisionMode\"\r\n                  ? DarkmodeSave\r\n                  : LightmodeSave;\r\n          } else if (images[n].alt === \"Refresh\") {\r\n            images[n].src =\r\n              this.props.name === \"ColorblindMode\"\r\n                ? \"\"\r\n                : this.props.name === \"Darkmode\" ||\r\n                  this.props.name === \"VisionMode\"\r\n                  ? DarkmodeRefresh\r\n                  : LightmodeRefresh;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }*/\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            component: Home\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/index\",\n            component: Home\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/Room\",\n            component: Room\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/about\",\n            component: About\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/Help\",\n            component: Help\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sleep\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navbar","Home","About","Help","Room","Sleep","ms","Promise","resolve","setTimeout","App","Component","constructor","props","state","currentUser","userName","userID","users","theme","updateCurrentUserInfo","bind","getUsers","getUserInfo","getCurrentUserInfo","handleErrors","replaceClasses","loginUser","displayInfo","document","body","style","backgroundColor","type","message","timeLength","infoMessageContainer","getElementById","classList","replace","innerText","render"],"sources":["C:/Users/Tom/w2g2022/w2g2022/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport './Navbar.css'\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './components/Startseite';\r\nimport About from './components/about';\r\nimport Help from './components/Help';\r\nimport Room from './components/Room';\r\n\r\nfunction Sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentUser: {\r\n        userName: \"\",\r\n        userID: -1,\r\n      },\r\n      \r\n      users: {},\r\n      theme: \"Darkmode\",\r\n      \r\n    };\r\n\r\n    \r\n   \r\n  \r\n    this.updateCurrentUserInfo = this.updateCurrentUserInfo.bind(this); // This updates the client side information of the currently logged in user\r\n    this.getUsers = this.getUsers.bind(this); // This gets all user related information from the server side\r\n    this.getUserInfo = this.getUserInfo.bind(this); // This gets the name and id of any specific user;\r\n    // information is taken from a client side copy\r\n    this.getCurrentUserInfo = this.getCurrentUserInfo.bind(this); // This gets the name and id of the currently logged in user;\r\n    // information is taken from a client side copy\r\n    this.handleErrors = this.handleErrors.bind(this); // This prints out errors to the console and shows an error message to the user;\r\n    // Used for network errors (specifically CORS errors) only currently.\r\n    this.replaceClasses = this.replaceClasses.bind(this); // This replaces the theme related classes\r\n    // of all affected elements with one specific theme class\r\n    this.loginUser = this.loginUser.bind(this); // This logs the user into an existing or newly created account\r\n    // depending on whether or not the account previously existed\r\n    this.displayInfo = this.displayInfo.bind(this); // This will display info of a given type for a certain time in a specific text box\r\n    // This is because the initial theme is Darkmode\r\n    document.body.style.backgroundColor = \"rgb(100, 100, 100)\";\r\n  }\r\n\r\n  \r\n  async displayInfo(type, message, timeLength) {\r\n    let infoMessageContainer = document.getElementById(\"infoMessage\");\r\n    infoMessageContainer.classList.replace(\"hidden\", type);\r\n    infoMessageContainer.innerText = message;\r\n    await Sleep(timeLength);\r\n    infoMessageContainer.classList.replace(type, \"hidden\");\r\n    infoMessageContainer.innerText = \"\";\r\n  }\r\n\r\n  /* >>>>>     LATER FOR THEME PICKER     <<<<<<\r\n\r\n\r\n  replaceClasses(newClass) {\r\n    this.setState({\r\n      theme: newClass,\r\n    });\r\n    if (\r\n      newClass !== \"Lightmode\" &&\r\n      document.getElementsByClassName(\"Lightmode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"Lightmode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"Lightmode\");\r\n        elements[0].classList.replace(\"Lightmode\", newClass);\r\n      }\r\n    } else if (\r\n      newClass !== \"Darkmode\" &&\r\n      document.getElementsByClassName(\"Darkmode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"Darkmode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"Darkmode\");\r\n        elements[0].classList.replace(\"Darkmode\", newClass);\r\n      }\r\n    } else if (\r\n      newClass !== \"VisionMode\" &&\r\n      document.getElementsByClassName(\"VisionMode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"VisionMode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"VisionMode\");\r\n        elements[0].classList.replace(\"VisionMode\", newClass);\r\n      }\r\n    } else if (\r\n      newClass !== \"ColorblindMode\" &&\r\n      document.getElementsByClassName(\"ColorblindMode\").length > 0\r\n    ) {\r\n      let elements = document.getElementsByClassName(\"ColorblindMode\");\r\n      while (elements.length > 0) {\r\n        elements = document.getElementsByClassName(\"ColorblindMode\");\r\n        elements[0].classList.replace(\"ColorblindMode\", newClass);\r\n      }\r\n    }\r\n  }\r\n  \r\n  changeTheme() {\r\n    this.props.replaceClasses(this.props.name);\r\n    document.body.style.background = this.backgrounds[this.props.name];\r\n    let containers = document.getElementsByClassName(\"container\");\r\n\r\n    for (let i = 0; i < containers.length; i++) {\r\n      let images = containers[i].getElementsByTagName(\"img\");\r\n      images[0].src =\r\n        this.props.name === \"Darkmode\" || this.props.name === \"VisionMode\"\r\n          ? DarkmodeSettings\r\n          : LightmodeSettings;\r\n      if (images.length > 1) {\r\n        for (let n = 1; n < images.length; n++) {\r\n          if (images[n].alt === \"Save\") {\r\n            images[n].src =\r\n              this.props.name === \"ColorblindMode\"\r\n                ? \"\"\r\n                : this.props.name === \"Darkmode\" ||\r\n                  this.props.name === \"VisionMode\"\r\n                  ? DarkmodeSave\r\n                  : LightmodeSave;\r\n          } else if (images[n].alt === \"Refresh\") {\r\n            images[n].src =\r\n              this.props.name === \"ColorblindMode\"\r\n                ? \"\"\r\n                : this.props.name === \"Darkmode\" ||\r\n                  this.props.name === \"VisionMode\"\r\n                  ? DarkmodeRefresh\r\n                  : LightmodeRefresh;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }*/\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      <Router>\r\n        <Navbar></Navbar>\r\n        <Routes>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/index\" component={Home} />\r\n          <Route exact path=\"/Room\" component={Room} />\r\n          <Route exact path=\"/about\" component={About} />\r\n          <Route exact path=\"/Help\" component={Help} />\r\n        </Routes>\r\n      </Router>\r\n    </div >\r\n  );\r\n  }\r\n}\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}